
plugins {
	id 'net.minecraftforge.gradle'
    id 'eclipse'
	id 'com.diffplug.eclipse.apt' version '3.42.2'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
}

version = '1.2.2'
group = 'com.lance5057.extradelight' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'extradelight'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'
    
     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                extradelight {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                extradelight {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--all', '--output', file('src/generated/resources/'),
                    '--mod', 'extradelight',
                    '--existing-mod', 'farmersdelight',
                    '--reports',
                    '--existing', sourceSets.main.resources.srcDirs[0]
					
			mods {
                extradelight {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources"
            ]
        }
    }
}

repositories {
	mavenLocal()
    maven { url "https://maven.jaackson.me" }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.k-4u.nl" }
	maven { url "https://maven.tterrag.com/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.3'
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	implementation fg.deobf("curse.maven:farmersdelight-398521:4679318")

    // compile against the JEI API but do not include it at runtime
	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
	// at runtime, use the full JEI jar for Forge
	runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
	
	implementation fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}-${create_version_build}:slim") { transitive = false }
	  
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-76:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-76")
	
	//implementation fg.deobf('curse.maven:patchouli-datagen-ptd-lib-585667:4399634')
}



// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "extradelight",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
			
        }
		   
    }
}